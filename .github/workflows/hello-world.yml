
# Every workflow file needs to have one or more **events that trigger it to run 
# Events cover most any GitHub activity, from opening a pull request to commenting on an issue to the successful completion of another workflow. 
# You can even trigger workflows from outside of GitHub via an API call and the repository-dispatch event. 
# These events provide a simple means for a tight integration between your CI/CD pipelines and the platform powering your development, 
# while still providing the flexibility to interact with your other tools.
# Events that trigger workflows are listed here -> https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows

# Now we need to define what happens when the workflow runs by creating a **job. 
# Every workflow has one or more jobs, which consist of a series of interrelated, executable steps. 
# By default, jobs function independently and run in parallel, but you can also configure a job to wait for another job(s) to complete before it begins. 
# For instance, you could have separate build jobs for different architectures running concurrently, 
# with a subsequent packaging job that only initiates once all build jobs have successfully concluded.

# A **runner is a machine that executes the jobs in a workflow. 
# There are two basic types of runners available: GitHub-hosted runners and self-hosted runners. 
# https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
# A GitHub-hosted runner provides a freshly-provisioned virtual machine running Ubuntu Linux, Microsoft Windows, or macOS. 
# When selecting a GitHub-hosted runner, you can identify the specific OS version, or specify -latest to use the most recent, stable image available. 
# GitHub also offers larger runner versions that have additional features, such as runner groups for access control across an organization and more. 

# As we mentioned before, each job is made up of one or more **steps. 
# Each step can either run a script that you define or run an action, which is a reusable extension that can simplify your workflow. 
# You can write your own custom actions, or you can use actions from GitHub Marketplace, which has thousands of actions for everything from code review 
# to dependency management to security and more. 

name: hello-world
on: push
jobs: 
  hello-world-job:
    runs-on: ubuntu-latest
    steps: 
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "$(cat hello_world.txt)"

        
  


